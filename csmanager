#!/usr/bin/env php
<?php include 'vendor/autoload.php';

error_reporting(E_ERROR | E_PARSE);

use Illuminate\Container\Container as IllContainer;
use Illuminate\Database\Capsule\Manager as Capsule;
use Illuminate\Events\Dispatcher as IllDispatcher;
use Manager\Config;
use Manager\Exceptions\FileNotFoundException;
use Manager\Handler;
use Manager\Logger;
use Manager\MigrationManager;
use Manager\Models\Map;
use React\Datagram\Factory as Datagram;
use React\Datagram\Socket;
use React\EventLoop\Factory as EventLoop;

// Define some things on runtime
define('MANAGER_STARTTIME', microtime(true));
define('MANAGER_BASE_DIR', __DIR__);

$version = '0.0.1-alpha';

Logger::log("-- CSManager v{$version} --", 0);
Logger::log('Loading configuration file...');

try {
    $config = new Config();
} catch (FileNotFoundException $e) {
    Logger::log("There was an error loading the config file. {$e->getMessage()}", Logger::LEVEL_EMERG);
    die(1);
}

Logger::setLevel($config['logger']['level']);

Logger::log('Loaded config file.');

Logger::log('Setting up database...');

try {
    $capsule = new Capsule();
    $capsule->addConnection($config['database']);

    $capsule->setEventDispatcher(new IllDispatcher(new IllContainer()));

    $capsule->setAsGlobal();
    $capsule->bootEloquent();
} catch (\Exception $e) {
    Logger::log("There was an error setting up the database. {$e->getMessage()}", Logger::LEVEL_EMERG);
    die(1);
}

if (count($argv) > 1) {
    switch ($argv[1]) {
        case 'migrate':
            $migrations = new MigrationManager($config);
            $migrations->run();
            break;
        default:
            Logger::log("Unknown paramater {$argv[1]}.", Logger::LEVEL_ALERT);
            break;
    }

    die;
}

Logger::log('Initilizing EventLoop...');

$loop = EventLoop::create();
$udp = new Datagram($loop);
$mapsInProgress = [];

$udp->createServer("{$config['udp']['bind']['ip']}:{$config['udp']['bind']['port']}")->then(function (Socket $socket) use (&$config, &$mapsInProgress) {
    Logger::log("UDP Server running on {$config['udp']['bind']['ip']}:{$config['udp']['bind']['port']}");

    $socket->on('message', function ($data, $addr) use (&$mapsInProgress) {
        $data = rtrim(substr($data, 5));
        Logger::log("recieved data from {$addr}: {$data}", Logger::LEVEL_DEBUG);

        if (isset($mapsInProgress[$addr])) {
            $map = $mapsInProgress[$addr];

            $map['handler']->handleData($data);
        } else {
            Logger::log("data recieved from {$addr} has no handler", Logger::LEVEL_DEBUG);
        }
    });
}, function ($e) {
    Logger::log("Unable to create the UDP server. {$e->getMessage()}", Logger::LEVEL_EMERG);
    die(1);
});

$loop->addPeriodicTimer(3, function () use ($udp, &$mapsInProgress, &$loop) {
    Logger::log('Looking for maps...', Logger::LEVEL_INFO);
    $maps = Map::where('status', 2)->get();

    foreach ($maps as $map) {
        $ipCheck = Map::where('status', '>=', 2)->where('status', '<', 12)->where('id', '!=', $map->id)->get();
        $inUse = false;

        foreach ($ipCheck as $mapCheck) {
            if ($mapCheck->match->server_id == $map->match->server_id) {
                Logger::log("Map #{$map->id} could not be started due to #{$mapCheck->id} using the same server.");
                $inUse = true;
                break;
            }
        }

        if (! $inUse) {
            Logger::log("Map #{$map->id} starting on server #{$map->match->server->id}.");
            $handler = new Handler($map, $stream, $config, $loop);
            $handler->addLoopClosure('onceTimer', function ($length, callable $closure) use (&$loop) {
                return $loop->addTimer($Length, $closure);
            });
            $handler->initMap();

            $mapsInProgress[$map->match->server->ip.':'.$map->match->server->port] = [
                'handler' => $handler,
            ];
        }
    }

    Logger::log('Finished, waiting 3 seconds until we check again.', Logger::LEVEL_INFO);
});

$loop->run();
